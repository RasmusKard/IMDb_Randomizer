import pandas as pd
import os
from sqlalchemy import create_engine


class DataFile:
    """
    Class for converting raw IMDb .tsv files into sorted .tsv files by data type. (movie, tv show, etc.)
    """
    def __init__(self, title_file, ratings_file):
        self.title_file = title_file
        self.ratings_file = ratings_file

    def data_title_cleanup(self):
        """
        Removes unnecessary tvEpisode, isAdult and endYear data from tsv.
        """
        df = pd.read_table(self.title_file, sep='\t')

        df = df[~df["titleType"].isin(['tvEpisode', 'videoGame'])]

        df = df[df["isAdult"] != 1]

        df = df.drop(['isAdult', 'endYear', 'runtimeMinutes', 'originalTitle'], axis=1)

        df.to_parquet(f'filtered_{self.title_file}.parquet',index=False)

    def data_merge(self):
        """
        Merges rating data .tsv and title data .tsv based on matching 'tconst' title identifiers.
        Deletes file generated by tsv_title_cleanup as it is no longer used.
        """

        data1 = pd.read_parquet(f'filtered_{self.title_file}.parquet')
        data2 = pd.read_table(self.ratings_file, sep='\t')

        data_merged = pd.merge(data1, data2,
                               on='tconst',
                               how='inner')
        data_merged.to_parquet('title_ratings_merged.parquet', index=False)
        try:
            os.remove(f'filtered_{self.title_file}.parquet')
        except OSError:
            pass

# def titletype_split():
#     """
#     Splits file generated by data_merge into files based on content type. (movie, tv show, etc.)
#     Deletes file generated by data_merge as it is no longer used.
#     """
#     titletypes = ["movie", "tvSeries", "tvMovie", "tvSpecial", "video", "short", "tvShort"]
#     for titletype in titletypes:
#         df = pd.read_parquet('title_ratings_merged.parquet')
#         df = df[df["titleType"] == f"{titletype}"]
#         df.to_parquet(f'{titletype}_data.parquet', index=False)
#     try:
#         os.remove('title_ratings_merged.parquet')
#     except OSError:
#         pass

# def data_file_delete():
#     titletypes = ["movie", "tvSeries", "tvMovie", "tvSpecial", "video", "short", "tvShort"]
#     for titletype in titletypes:
#         try:
#             os.remove(f'{titletype}_data.parquet')
#         except OSError:
#             pass


def clean_data():
    values = {'startYear': 0, 'genres': 'NULL'}

    df = pd.read_parquet('title_ratings_merged.parquet')

    df.to_csv('title_data_clean.csv', index=False)

    df = pd.read_csv('title_data_clean.csv', na_values=r'\N')

    df = df.fillna(value=values)

    df = df.astype({'startYear': 'int64'})

    df.to_csv('title_data_clean.csv', index=False)


def extract_genre():
    df = pd.read_csv('title_data_clean.csv', na_values='NULL')

    df = df[['tconst', 'genres']]

    df.to_csv('tconst_genre.csv', index=False, na_rep='NULL')


def genre_split():
    df = pd.read_csv('tconst_genre.csv', na_values='NULL')

    df = (df.set_index(['tconst'])
          .stack()
          .str.split(',', expand=True)
          .stack()
          .unstack(-2)
          .reset_index(-1, drop=True)
          .reset_index()
          )
    df.to_csv('tconst_genre.csv', index=False, na_rep='NULL')


def remove_genre():
    df = pd.read_csv('title_data_clean.csv', na_values='NULL')

    df = df.drop('genres', axis=1)

    df.to_csv('title_data_clean_final.csv', index=False, na_rep='NULL')

def csv_to_sql():
    engine = create_engine('mysql+mysqlconnector://root:1234@localhost:3306/content_data')

    df = pd.read_csv('title_data_clean.csv')


    df.to_sql(name='test', con=engine, index=False, if_exists='append')
